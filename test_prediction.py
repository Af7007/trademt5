"""
Script de teste para o Motor de Predi√ß√£o
Demonstra como usar o m√≥dulo de predi√ß√£o
"""

import requests
import json
from datetime import datetime


def test_basic_prediction():
    """Teste b√°sico de predi√ß√£o"""
    print("=" * 60)
    print("TESTE 1: Predi√ß√£o B√°sica para XAUUSDc")
    print("=" * 60)
    
    url = "http://localhost:5000/prediction/analyze"
    data = {
        "symbol": "XAUUSDc",
        "target_profit": 30.0,
        "balance": 1000.0,
        "timeframe": "M1"
    }
    
    print(f"\nüì§ Enviando requisi√ß√£o...")
    print(f"S√≠mbolo: {data['symbol']}")
    print(f"Lucro Alvo: ${data['target_profit']}")
    print(f"Banca: ${data['balance']}")
    print(f"Timeframe: {data['timeframe']}")
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("\n‚úÖ Predi√ß√£o gerada com sucesso!\n")
            display_prediction_summary(result['result'])
        else:
            print(f"\n‚ùå Erro: {result.get('error')}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
        print("Certifique-se que o servidor Flask est√° rodando na porta 5000")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")


def test_advanced_prediction():
    """Teste com par√¢metros avan√ßados"""
    print("\n" + "=" * 60)
    print("TESTE 2: Predi√ß√£o Avan√ßada com Par√¢metros Customizados")
    print("=" * 60)
    
    url = "http://localhost:5000/prediction/analyze"
    data = {
        "symbol": "XAUUSDc",
        "target_profit": 50.0,
        "balance": 2000.0,
        "timeframe": "M5",
        "lot_size": 0.02,
        "take_profit": 150,
        "stop_loss": 75,
        "max_operations": 20,
        "risk_percentage": 1.5
    }
    
    print(f"\nüì§ Enviando requisi√ß√£o avan√ßada...")
    print(f"S√≠mbolo: {data['symbol']}")
    print(f"Lucro Alvo: ${data['target_profit']}")
    print(f"Banca: ${data['balance']}")
    print(f"Lote: {data['lot_size']}")
    print(f"TP: {data['take_profit']} pontos")
    print(f"SL: {data['stop_loss']} pontos")
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("\n‚úÖ Predi√ß√£o gerada com sucesso!\n")
            display_prediction_summary(result['result'])
        else:
            print(f"\n‚ùå Erro: {result.get('error')}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")


def test_quick_prediction():
    """Teste de predi√ß√£o r√°pida"""
    print("\n" + "=" * 60)
    print("TESTE 3: Predi√ß√£o R√°pida")
    print("=" * 60)
    
    url = "http://localhost:5000/prediction/quick-prediction"
    data = {
        "symbol": "BTCUSDc",
        "target_profit": 100.0,
        "balance": 5000.0
    }
    
    print(f"\nüì§ Enviando predi√ß√£o r√°pida...")
    print(f"S√≠mbolo: {data['symbol']}")
    print(f"Lucro Alvo: ${data['target_profit']}")
    
    try:
        response = requests.post(url, json=data, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("\n‚úÖ Predi√ß√£o r√°pida gerada!\n")
            summary = result.get('summary', {})
            
            print("üìä RESUMO R√ÅPIDO:")
            print(f"  ‚Ä¢ Opera√ß√µes: {summary.get('estimated_operations')}")
            print(f"  ‚Ä¢ Dura√ß√£o: {summary.get('estimated_duration')}")
            print(f"  ‚Ä¢ Probabilidade: {summary.get('success_probability')}")
            print(f"  ‚Ä¢ Risco: {summary.get('risk_level')}")
            print(f"  ‚Ä¢ Timeframe: {summary.get('best_timeframe')}")
            print(f"  ‚Ä¢ Lote Recomendado: {summary.get('recommended_lot_size')}")
        else:
            print(f"\n‚ùå Erro: {result.get('error')}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")


def test_market_analysis():
    """Teste de an√°lise de mercado"""
    print("\n" + "=" * 60)
    print("TESTE 4: An√°lise de Mercado")
    print("=" * 60)
    
    symbol = "XAUUSDc"
    url = f"http://localhost:5000/prediction/market-analysis/{symbol}?timeframe=M1"
    
    print(f"\nüì§ Solicitando an√°lise de mercado para {symbol}...")
    
    try:
        response = requests.get(url, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("\n‚úÖ An√°lise de mercado obtida!\n")
            analysis = result.get('analysis', {})
            
            print("üìà AN√ÅLISE DE MERCADO:")
            
            # Tend√™ncia
            trend = analysis.get('trend', {})
            print(f"\n  Tend√™ncia:")
            print(f"    ‚Ä¢ Dire√ß√£o: {trend.get('direction', 'N/A')}")
            print(f"    ‚Ä¢ For√ßa: {trend.get('strength', 0) * 100:.1f}%")
            
            # Volatilidade
            volatility = analysis.get('volatility', {})
            print(f"\n  Volatilidade:")
            print(f"    ‚Ä¢ N√≠vel: {volatility.get('level', 'N/A')}")
            print(f"    ‚Ä¢ ATR: {volatility.get('atr', 0):.2f}")
            
            # Indicadores
            indicators = analysis.get('indicators', {})
            print(f"\n  Indicadores:")
            print(f"    ‚Ä¢ RSI: {indicators.get('rsi', 0):.1f}")
            print(f"    ‚Ä¢ MACD: {indicators.get('macd', 0):.2f}")
            print(f"    ‚Ä¢ Pre√ßo Atual: {indicators.get('current_price', 0):.2f}")
        else:
            print(f"\n‚ùå Erro: {result.get('error')}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")


def display_prediction_summary(result):
    """Exibe resumo formatado da predi√ß√£o"""
    predictions = result.get('predictions', {})
    risk = result.get('risk_management', {})
    timing = result.get('timing', {})
    
    print("üìä RESUMO DA PREDI√á√ÉO:")
    print(f"  ‚Ä¢ Opera√ß√µes Estimadas: {predictions.get('estimated_operations')}")
    print(f"  ‚Ä¢ Tempo Estimado: {predictions.get('estimated_duration_description')}")
    print(f"  ‚Ä¢ Probabilidade de Sucesso: {predictions.get('success_probability', 0) * 100:.1f}%")
    print(f"  ‚Ä¢ N√≠vel de Risco: {risk.get('risk_level')}")
    print(f"  ‚Ä¢ Timeframe Recomendado: {timing.get('best_timeframe')}")
    
    # Recomenda√ß√µes de trade
    trades = result.get('recommended_trades', [])
    if trades:
        print(f"\nüéØ RECOMENDA√á√ïES DE TRADE ({len(trades)}):")
        for i, trade in enumerate(trades, 1):
            print(f"\n  [{i}] {trade.get('direction')} - Confian√ßa: {trade.get('confidence', 0) * 100:.1f}%")
            print(f"      Entrada: {trade.get('entry_price'):.5f}")
            print(f"      TP: {trade.get('take_profit'):.5f}")
            print(f"      SL: {trade.get('stop_loss'):.5f}")
            print(f"      Lote: {trade.get('lot_size')}")
            print(f"      Lucro Esperado: ${trade.get('expected_profit'):.2f}")
            print(f"      Raz√£o R/R: {trade.get('risk_reward_ratio'):.2f}")
            print(f"      Motivo: {trade.get('reasoning', 'N/A')[:100]}...")
    
    # Avisos
    warnings = result.get('warnings', [])
    if warnings:
        print(f"\n‚ö†Ô∏è  AVISOS:")
        for warning in warnings:
            print(f"  ‚Ä¢ {warning}")
    
    # Recomenda√ß√µes
    recommendations = result.get('recommendations', [])
    if recommendations:
        print(f"\nüí° RECOMENDA√á√ïES:")
        for rec in recommendations[:5]:  # Mostrar apenas 5
            print(f"  ‚Ä¢ {rec}")


def test_symbol_info():
    """Teste de informa√ß√µes do s√≠mbolo"""
    print("\n" + "=" * 60)
    print("TESTE 5: Informa√ß√µes do S√≠mbolo")
    print("=" * 60)
    
    symbol = "XAUUSDc"
    url = f"http://localhost:5000/prediction/symbol-info/{symbol}"
    
    print(f"\nüì§ Solicitando informa√ß√µes de {symbol}...")
    
    try:
        response = requests.get(url, timeout=30)
        result = response.json()
        
        if result.get('success'):
            print("\n‚úÖ Informa√ß√µes obtidas!\n")
            info = result.get('symbol_info', {})
            
            print(f"üìã INFORMA√á√ïES DO S√çMBOLO:")
            print(f"  ‚Ä¢ Nome: {info.get('name')}")
            print(f"  ‚Ä¢ Descri√ß√£o: {info.get('description')}")
            print(f"  ‚Ä¢ Spread: {info.get('spread')} pontos")
            print(f"  ‚Ä¢ Bid: {info.get('bid'):.5f}")
            print(f"  ‚Ä¢ Ask: {info.get('ask'):.5f}")
            print(f"  ‚Ä¢ Lote M√≠n: {info.get('volume_min')}")
            print(f"  ‚Ä¢ Lote M√°x: {info.get('volume_max')}")
            print(f"  ‚Ä¢ D√≠gitos: {info.get('digits')}")
        else:
            print(f"\n‚ùå Erro: {result.get('error')}")
    
    except requests.exceptions.ConnectionError:
        print("\n‚ùå Erro: N√£o foi poss√≠vel conectar ao servidor.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")


def main():
    """Executa todos os testes"""
    print("\n")
    print("üîÆ" * 30)
    print("   TESTES DO MOTOR DE PREDI√á√ÉO - MT5")
    print("üîÆ" * 30)
    print(f"\nIniciado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Verificar se servidor est√° online
    try:
        response = requests.get("http://localhost:5000/prediction/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ Servidor online e funcionando!\n")
        else:
            print("‚ö†Ô∏è Servidor respondeu mas pode estar com problemas\n")
    except:
        print("‚ùå ERRO: Servidor n√£o est√° respondendo!")
        print("Por favor, inicie o servidor Flask antes de executar os testes.")
        print("Comando: python app.py\n")
        return
    
    # Executar testes
    tests = [
        ("Predi√ß√£o B√°sica", test_basic_prediction),
        ("Predi√ß√£o Avan√ßada", test_advanced_prediction),
        ("Predi√ß√£o R√°pida", test_quick_prediction),
        ("An√°lise de Mercado", test_market_analysis),
        ("Informa√ß√µes do S√≠mbolo", test_symbol_info)
    ]
    
    for name, test_func in tests:
        try:
            test_func()
        except KeyboardInterrupt:
            print("\n\n‚ùå Testes interrompidos pelo usu√°rio")
            break
        except Exception as e:
            print(f"\n‚ùå Erro no teste '{name}': {e}")
    
    print("\n" + "=" * 60)
    print("TESTES CONCLU√çDOS")
    print("=" * 60)
    print(f"\nFinalizado em: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("\nüí° Dica: Acesse http://localhost:5000/prediction/dashboard para a interface gr√°fica")
    print("\n")


if __name__ == "__main__":
    main()
