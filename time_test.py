#!/usr/bin/env python3
"""
Teste de hor√°rios MT5 vs Local
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from datetime import datetime, timedelta
import pandas as pd
import MetaTrader5 as mt5
from core.mt5_connection import MT5Connection

def test_times():
    """Testa hor√°rios do sistema vs MT5"""
    print("‚è∞ TESTANDO HOR√ÅRIOS MT5 VS LOCAL")
    print("=" * 50)

    # Conectar ao MT5
    mt5_conn = MT5Connection()
    try:
        mt5_conn.initialize()

        # Hor√°rio local
        local_time = datetime.now()
        print("üïê HOR√ÅRIO LOCAL (Python datetime.now()): {}".format(local_time))

        # Hora do terminal MT5
        terminal = mt5.terminal_info()
        if terminal:
            if hasattr(terminal, 'datetime'):
                terminal_time = getattr(terminal, 'datetime')
                if terminal_time:
                    print("üñ•Ô∏è  HOR√ÅRIO TERMINAL MT5: {}".format(datetime.fromtimestamp(terminal_time)))
                else:
                    print("üñ•Ô∏è  HOR√ÅRIO TERMINAL MT5: N√£o dispon√≠vel")
            else:
                print("üñ•Ô∏è  HOR√ÅRIO TERMINAL MT5: Atributo datetime n√£o encontrado")
        else:
            print("‚ùå N√£o conseguiu obter hor√°rio do terminal")

        # Hora do servidor via account
        account = mt5.account_info()
        if account:
            print("üóÑÔ∏è  SERVIDOR MT5: {}".format(account.server))

            # Obter hor√°rio do servidor via dados de mercado
            print("üìä Testando dados de mercado...")
            rates = mt5.copy_rates_from_pos('BTCUSDc', mt5.TIMEFRAME_M5, 0, 1)
            if rates is not None and len(rates) > 0:
                last_rate = rates[-1]
                timestamp = int(last_rate[0])  # Converter para int se necess√°rio
                server_time = pd.to_datetime(timestamp, unit='s')
                print("üìä HOR√ÅRIO √öLTIMO CANDLE (servidor GMT): {}".format(server_time))

                # Diferen√ßa
                local_diff = local_time - server_time.to_pydatetime().replace(tzinfo=None)
                print("‚ö° DIFEREN√áA: Local - Server = {:.2f} segundos".format(local_diff.total_seconds()))

                # GMT convertido
                gmt_time = local_time - timedelta(hours=3)  # UTC-3
                gmt_diff = gmt_time - server_time.to_pydatetime().replace(tzinfo=None)
                print("üåç GMT Convertido (UTC-3): {} | Dif: {:.2f}s".format(gmt_time, gmt_diff.total_seconds()))

            else:
                print("‚ùå N√£o conseguiu obter dados de mercado")
        else:
            print("‚ùå N√£o conseguiu obter dados da conta MT5")

        mt5.shutdown()

    except Exception as e:
        print("‚ùå ERRO GERAL: {}".format(e))
        import traceback
        traceback.print_exc()

    print("=" * 50)
