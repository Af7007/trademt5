"""
Script para verificar por que o bot n√£o est√° executando opera√ß√µes
"""

import requests
import json

def check_bot_status():
    """Verifica status detalhado dos bots"""
    
    print("=" * 60)
    print("üîç DIAGN√ìSTICO DE BOT - Por que n√£o executa?")
    print("=" * 60)
    
    try:
        # Listar bots
        response = requests.get('http://localhost:5000/bots')
        data = response.json()
        
        if not data.get('success'):
            print("‚ùå Erro ao listar bots")
            return
        
        bots = data.get('bots', [])
        
        if not bots:
            print("\n‚ùå NENHUM BOT ATIVO!")
            print("   Crie um bot primeiro")
            return
        
        print(f"\n‚úì Encontrados {len(bots)} bot(s)\n")
        
        for bot in bots:
            bot_id = bot.get('bot_id')
            symbol = bot.get('symbol')
            is_running = bot.get('is_running')
            
            print("-" * 60)
            print(f"ü§ñ Bot: {bot_id}")
            print(f"   S√≠mbolo: {symbol}")
            print(f"   Status: {'‚úì Rodando' if is_running else '‚ùå Parado'}")
            
            # Verificar configura√ß√£o
            config = bot.get('config', {})
            trading = config.get('trading', {})
            
            print(f"\nüìã Configura√ß√£o:")
            print(f"   auto_execute: {trading.get('auto_execute', False)}")
            print(f"   max_daily_trades: {trading.get('max_daily_trades', 0)}")
            print(f"   max_daily_loss: ${trading.get('max_daily_loss', 0)}")
            print(f"   trade_cooldown: {trading.get('trade_cooldown', 0)}s")
            
            signals = config.get('signals', {})
            print(f"\nüéØ Sinais:")
            print(f"   min_confidence: {signals.get('min_confidence', 0)*100:.0f}%")
            
            # Verificar an√°lises
            try:
                analysis_response = requests.get(f'http://localhost:5000/bots/{bot_id}/analysis?limit=5')
                analysis_data = analysis_response.json()
                
                if analysis_data.get('success'):
                    analyses = analysis_data.get('analyses', [])
                    print(f"\nüìä √öltimas {len(analyses)} an√°lises:")
                    
                    for a in analyses:
                        signal = a.get('signal')
                        confidence = a.get('confidence', 0) * 100
                        timestamp = a.get('timestamp', '')
                        print(f"   {timestamp}: {signal} ({confidence:.1f}%)")
                else:
                    print("\n‚ö†Ô∏è Sem an√°lises registradas")
            except:
                print("\n‚ö†Ô∏è Erro ao buscar an√°lises")
            
            # DIAGN√ìSTICO
            print(f"\nüîç DIAGN√ìSTICO:")
            
            if not is_running:
                print("   ‚ùå BOT PARADO - Inicie o bot primeiro!")
            else:
                print("   ‚úì Bot est√° rodando")
            
            if not trading.get('auto_execute'):
                print("   ‚ùå AUTO_EXECUTE DESABILITADO!")
                print("      Configure 'trading.auto_execute': true")
            else:
                print("   ‚úì Auto execute habilitado")
            
            min_conf = signals.get('min_confidence', 0.65)
            if min_conf > 0.75:
                print(f"   ‚ö†Ô∏è Confian√ßa m√≠nima ALTA ({min_conf*100:.0f}%)")
                print("      Pode estar bloqueando trades")
            else:
                print(f"   ‚úì Confian√ßa m√≠nima OK ({min_conf*100:.0f}%)")
            
            print()
        
        print("=" * 60)
        print("\nüí° SOLU√á√ïES:")
        print("1. Se bot parado: Clique 'Start' no painel")
        print("2. Se auto_execute false: Edite config e ative")
        print("3. Se confian√ßa alta: Reduza para 65-70%")
        print("4. Verifique logs em tempo real no painel")
        print("=" * 60)
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        print("\n‚ö†Ô∏è Certifique-se que o servidor est√° rodando:")
        print("   python app.py")


if __name__ == "__main__":
    check_bot_status()
